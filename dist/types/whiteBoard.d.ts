import { BRUSHTYPE, svgScore, OPERATING_MODE, drawObject, laserPointData, drawCtrlData, measuresObject, emitData } from './types/types';
declare abstract class whiteBoardBasic {
    serverMode: boolean;
    color: string;
    environment: string;
    lineSize: number;
    lineType: BRUSHTYPE;
    svgScore: svgScore;
    canvas: HTMLCanvasElement;
    laserNode: HTMLDivElement;
    operatingMode: OPERATING_MODE;
    protected drawList: drawObject[];
    protected laserPoint: laserPointData;
    protected laserPointList: laserPointData[];
    protected laserRevertEngineStopd: boolean;
    protected ctx: any;
    protected unEmitList: Array<[number, number]> | laserPointData[];
    protected enableEmit: boolean;
    protected undoList: drawObject[];
    protected progressPath: drawObject | undefined;
    protected drawCtrl: drawCtrlData;
    protected drawPath: drawObject;
    protected emitDataFn: any;
    protected measures: measuresObject[];
    private _mode;
    private _canvas;
    abstract touchStart(...args: any[]): void;
    abstract touchMove(...args: any[]): void;
    abstract touchEnd(...args: any[]): void;
    abstract clearFn(): void;
    abstract eraseFn(arg: boolean): void;
    abstract undoFn(): void;
    abstract redoFn(): void;
}
declare class whiteBoard extends whiteBoardBasic {
    constructor(o: {
        svgScore?: svgScore;
        canvas?: HTMLCanvasElement;
        emitData?: (args: emitData) => any;
        color?: string;
        lineSize?: number;
        serverMode?: boolean;
        environment?: string;
    });
    touchStart(e: any): void;
    touchMove(e: any): void;
    touchEnd(e: any): void;
    clearFn(): void;
    eraseFn(state: boolean): void;
    undoFn(): void;
    redoFn(): void;
    clientLaserSync(recivedData: laserPointData): void;
    clientRerender(recivedData: {
        type: string;
        drawPath: drawObject;
    }): void;
    reRenderAll(): void;
    private loadMeasuresInfo;
    private _drawFree;
    private _drawClientFree;
    private _drawLine;
    private _drawClientLine;
    private _drawCircle;
    private _drawClientCircle;
    private _drawRect;
    private _drawClientRect;
    private _renderPath;
    private _reRenderAllPath;
    private _setDrawCtrl;
    private _setDrawPath;
    private _checkInPath;
    private _checkInFree;
    private _checkInLine;
    private _checkInRect;
    private _checkInCircle;
    private laserMove;
    private laserRevertEngine;
    private transformFirstPoint;
    private transformPoint;
    private findNearestPoint;
    private revertPoint;
    private revertLaserPoint;
    private _uuid;
    private getBoardData;
    private emitCanvasData;
    private emitLaserData;
}
export default whiteBoard;
